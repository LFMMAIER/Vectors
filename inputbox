# A simple module to get user input allowing for backspace but not arrow keys or delete key
# Parameters/Arguments:
#   screen => window to draw the inputbox on
#   self.question => prompt for the user
#   self.rect => a self.rectangle giving the position and size of the inputbox
# options parameters
#   self.backClr=BACKGROUND_COLOR, textClr=TEXT_COLOR, self.borderClr=BORDER_COLOR
# Called by:
# from inputbox import *
# userInput = ask(win,prompt,self.rect)
# Font size and type are defined by constants could add these later as parameters
# Constants are used to define the default values for the optional parameters so you can change this
# Creidt to Mr Jones

import pygame, pygame.font, pygame.event, pygame.draw, string
from pygame.locals import *

BACKGROUND_COLOR = (0,0,0)
TEXT_COLOR = (255,255,255)
BORDER_COLOR = (255,255,255)
FONT_SIZE = 24
FONT_TYPE = None
TEXT_INDENT = 10
VALID_KEYS = '-0123456789'

def get_key():
  while 1:
    event = pygame.event.poll()
    if event.type == KEYDOWN:
      return event.key
    else:
      pass

class inputbox(object):

  def __init__(self,question,rect,backClr,textClr,borderClr):
    self.question = question
    self.rect = rect
    self.backClr = backClr
    self.textClr = textClr
    self.borderClr = borderClr
    self.borderthickness = 1
    self.value = ''
    self.text = self.question + self.value
  
  def display_box(self,screen):    #Note: the message is the prompt + what they type
    "Print a message in a box at position self.rect"
    if len(self.text) != 0:
      fontobject = pygame.font.Font(FONT_TYPE,FONT_SIZE)
      #self.rect(Surface, color, self.rect, width=0)
      message_surface = fontobject.render(self.text, 1, self.textClr)
      messageWidth = message_surface.get_width() + TEXT_INDENT * 2
      if messageWidth > self.rect[2]:  # make the box bigger if the message goes out of the box
        self.value = self.value[0:-1]
        self.text = self.question + self.value
    pygame.draw.rect(screen, self.backClr, self.rect, 0)
    pygame.draw.rect(screen, self.borderClr, self.rect, self.borderthickness)
    if len(self.text) != 0:
      yOffSet = (self.rect[3] - message_surface.get_height()) // 2 + 1    # vertically centre the text in the input box
      screen.blit(message_surface, (self.rect[0]+TEXT_INDENT,self.rect[1]+yOffSet))

  def giveval(self):

    if self.value != '':
      return -1*int(self.value[1:]) if self.value[0] == '-' else int(self.value)
    else:
      return None

  def clear(self):
    self.value = ''
    self.text = self.question + self.value

  def clicked(self,m):
    x = m[0]
    y = m[1]
    if x >= self.rect[0] and y >= self.rect[1] and x <= self.rect[0] + self.rect[2] and y <= self.rect[1] + self.rect[3]:
        return True
    else:
        return False

  def ask(self,screen):
    global VALID_KEYS
    "ask(screen, self.question) -> answer"
    pygame.font.init()
    enteringText = True
    orginalthickness = self.borderthickness
    self.borderthickness = 5
    inputbox.display_box(self,screen)
    while enteringText:
      for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
          if event.key == K_BACKSPACE:
            self.value = self.value[0:-1]
            self.text = self.question + self.value
          elif event.key == K_RETURN:
            enteringText = False
          elif chr(event.key) in VALID_KEYS:
            self.value += chr(event.key)
            self.text = self.question + self.value

        if event.type == pygame.MOUSEBUTTONDOWN:
          clickPos = pygame.mouse.get_pos()
          if inputbox.clicked(self,clickPos) == False:
            enteringText = False
      
      self.borderthickness = orginalthickness
      inputbox.display_box(self,screen)
      pygame.display.flip()

